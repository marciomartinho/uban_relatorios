#!/usr/bin/env python3
"""
Script para corrigir o nome da coluna incategoria para cogrupo na tabela despesa_saldo
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import duckdb
from pathlib import Path
from datetime import datetime

def corrigir_coluna_despesa_saldo():
    """Renomeia a coluna incategoria para cogrupo em despesa_saldo"""
    
    db_path = Path("dados_brutos/fato/db_local/uban.duckdb")
    
    print("=" * 80)
    print("CORRE√á√ÉO DE COLUNA - DESPESA_SALDO")
    print("=" * 80)
    print(f"Banco de dados: {db_path}")
    print(f"Corre√ß√£o: incategoria ‚Üí cogrupo")
    print()
    
    if not db_path.exists():
        print(f"‚ùå ERRO: Banco de dados n√£o encontrado: {db_path}")
        return False
    
    try:
        conn = duckdb.connect(str(db_path))
        
        # 1. Verificar estrutura atual
        print("üìä Verificando estrutura atual da tabela despesa_saldo...")
        colunas = conn.execute("""
            SELECT column_name, data_type, ordinal_position
            FROM information_schema.columns 
            WHERE table_name = 'despesa_saldo'
            ORDER BY ordinal_position
        """).fetchall()
        
        # Verificar se incategoria existe e cogrupo n√£o existe
        tem_incategoria = any(col[0] == 'incategoria' for col in colunas)
        tem_cogrupo = any(col[0] == 'cogrupo' for col in colunas)
        
        if not tem_incategoria:
            print("‚ùå ERRO: Coluna 'incategoria' n√£o encontrada!")
            print("\nColunas existentes:")
            for col, tipo, pos in colunas:
                print(f"   {pos}. {col} ({tipo})")
            return False
        
        if tem_cogrupo:
            print("‚ö†Ô∏è AVISO: Coluna 'cogrupo' j√° existe!")
            print("   Pode ser que a corre√ß√£o j√° foi aplicada.")
            return False
        
        print("‚úÖ Coluna 'incategoria' encontrada")
        print("‚úÖ Coluna 'cogrupo' n√£o existe (OK para criar)")
        
        # 2. Mostrar valores √∫nicos atuais
        print("\nüìà Analisando valores atuais de 'incategoria'...")
        valores = conn.execute("""
            SELECT incategoria, COUNT(*) as qtd
            FROM despesa_saldo
            GROUP BY incategoria
            ORDER BY incategoria
        """).fetchall()
        
        print(f"   Valores distintos: {len(valores)}")
        for val, qtd in valores[:10]:  # Mostrar at√© 10
            print(f"   - {val}: {qtd:,} registros")
        
        # 3. Verificar relacionamento atual (que est√° falhando)
        print("\nüîç Verificando relacionamento atual com dim_categoria_despesa...")
        orfaos = conn.execute("""
            SELECT COUNT(DISTINCT ds.incategoria)
            FROM despesa_saldo ds
            LEFT JOIN dim_categoria_despesa dcd ON ds.incategoria = dcd.incategoria
            WHERE ds.incategoria IS NOT NULL
            AND dcd.incategoria IS NULL
        """).fetchone()[0]
        
        print(f"   Valores √≥rf√£os em dim_categoria_despesa: {orfaos}")
        
        # 4. Verificar se os valores batem com dim_grupo_despesa
        print("\nüîç Verificando se os valores correspondem a dim_grupo_despesa...")
        
        # Primeiro, verificar se dim_grupo_despesa existe
        dim_grupo_exists = conn.execute("""
            SELECT COUNT(*) 
            FROM information_schema.tables 
            WHERE table_name = 'dim_grupo_despesa'
        """).fetchone()[0] > 0
        
        if dim_grupo_exists:
            # Verificar correspond√™ncia
            correspondem = conn.execute("""
                SELECT COUNT(DISTINCT ds.incategoria)
                FROM despesa_saldo ds
                INNER JOIN dim_grupo_despesa dgd ON ds.incategoria = dgd.cogrupo
                WHERE ds.incategoria IS NOT NULL
            """).fetchone()[0]
            
            total_distintos = conn.execute("""
                SELECT COUNT(DISTINCT incategoria)
                FROM despesa_saldo
                WHERE incategoria IS NOT NULL
            """).fetchone()[0]
            
            print(f"   Total de valores distintos: {total_distintos}")
            print(f"   Valores que correspondem em dim_grupo_despesa: {correspondem}")
            
            if correspondem == total_distintos:
                print("   ‚úÖ PERFEITO! Todos os valores correspondem a cogrupo em dim_grupo_despesa!")
            else:
                print(f"   ‚ö†Ô∏è ATEN√á√ÉO: {total_distintos - correspondem} valores n√£o correspondem")
                
                # Mostrar valores que n√£o correspondem
                nao_correspondem = conn.execute("""
                    SELECT DISTINCT ds.incategoria
                    FROM despesa_saldo ds
                    LEFT JOIN dim_grupo_despesa dgd ON ds.incategoria = dgd.cogrupo
                    WHERE ds.incategoria IS NOT NULL
                    AND dgd.cogrupo IS NULL
                    LIMIT 10
                """).fetchall()
                
                if nao_correspondem:
                    print("\n   Valores que N√ÉO correspondem:")
                    for (val,) in nao_correspondem:
                        print(f"   - {val}")
        else:
            print("   ‚ùå Tabela dim_grupo_despesa n√£o encontrada!")
        
        # 5. Confirmar a altera√ß√£o
        print("\n" + "="*60)
        print("‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√°:")
        print("   1. Renomear a coluna 'incategoria' para 'cogrupo'")
        print("   2. Manter todos os dados intactos")
        print("   3. Permitir o relacionamento correto com dim_grupo_despesa")
        print("="*60)
        
        resposta = input("\n‚ùì Confirma a altera√ß√£o? (s/N): ")
        if resposta.lower() != 's':
            print("\n‚ùå Opera√ß√£o cancelada.")
            return False
        
        # 6. Fazer backup dos dados (criar tabela tempor√°ria)
        print("\nüíæ Criando backup tempor√°rio...")
        conn.execute("""
            CREATE TABLE despesa_saldo_backup AS 
            SELECT * FROM despesa_saldo
        """)
        print("   ‚úÖ Backup criado em 'despesa_saldo_backup'")
        
        # 7. Executar a altera√ß√£o
        print("\nüîß Renomeando coluna...")
        conn.execute("ALTER TABLE despesa_saldo RENAME COLUMN incategoria TO cogrupo")
        print("   ‚úÖ Coluna renomeada com sucesso!")
        
        # 8. Verificar resultado
        print("\nüìã Verificando resultado...")
        novas_colunas = conn.execute("""
            SELECT column_name
            FROM information_schema.columns 
            WHERE table_name = 'despesa_saldo'
            AND column_name IN ('incategoria', 'cogrupo')
        """).fetchall()
        
        tem_cogrupo_agora = any(col[0] == 'cogrupo' for col in novas_colunas)
        tem_incategoria_agora = any(col[0] == 'incategoria' for col in novas_colunas)
        
        if tem_cogrupo_agora and not tem_incategoria_agora:
            print("   ‚úÖ Sucesso! Coluna 'cogrupo' existe e 'incategoria' foi removida")
            
            # Testar novo relacionamento
            if dim_grupo_exists:
                print("\nüîç Testando novo relacionamento com dim_grupo_despesa...")
                orfaos_novo = conn.execute("""
                    SELECT COUNT(DISTINCT ds.cogrupo)
                    FROM despesa_saldo ds
                    LEFT JOIN dim_grupo_despesa dgd ON ds.cogrupo = dgd.cogrupo
                    WHERE ds.cogrupo IS NOT NULL
                    AND dgd.cogrupo IS NULL
                """).fetchone()[0]
                
                if orfaos_novo == 0:
                    print("   ‚úÖ PERFEITO! Nenhum valor √≥rf√£o com dim_grupo_despesa!")
                else:
                    print(f"   ‚ö†Ô∏è Ainda existem {orfaos_novo} valores √≥rf√£os")
            
            # Remover backup se tudo OK
            resposta = input("\n‚ùì Remover tabela de backup? (S/n): ")
            if resposta.lower() != 'n':
                conn.execute("DROP TABLE despesa_saldo_backup")
                print("   ‚úÖ Backup removido")
            else:
                print("   ‚ÑπÔ∏è Backup mantido em 'despesa_saldo_backup'")
            
            return True
        else:
            print("   ‚ùå ERRO: Algo deu errado na altera√ß√£o!")
            print("   Use a tabela 'despesa_saldo_backup' para restaurar se necess√°rio")
            return False
        
    except Exception as e:
        print(f"\n‚ùå ERRO durante a corre√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if 'conn' in locals():
            conn.close()

def main():
    """Fun√ß√£o principal"""
    print("\nüîß CORRE√á√ÉO DE NOME DE COLUNA")
    print("Este script ir√° renomear a coluna 'incategoria' para 'cogrupo'")
    print("na tabela despesa_saldo, corrigindo o relacionamento com dim_grupo_despesa\n")
    
    if corrigir_coluna_despesa_saldo():
        print("\nüéâ Corre√ß√£o conclu√≠da com sucesso!")
        print("\nüìå Pr√≥ximos passos:")
        print("   1. Execute novamente a verifica√ß√£o de integridade:")
        print("      python scripts/verificar_integridade_duckdb.py")
        print("   2. A coluna agora deve se relacionar corretamente com dim_grupo_despesa")
        print("\n‚ö†Ô∏è IMPORTANTE: Se voc√™ recarregar o Excel futuramente,")
        print("   lembre-se de corrigir o nome da coluna no arquivo tamb√©m!")
    else:
        print("\n‚ùå Falha na corre√ß√£o.")

if __name__ == "__main__":
    main()