"""
Script para analisar estrutura do arquivo ReceitaLancamento.xlsx
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
from pathlib import Path
from datetime import datetime

def inspect_receita_lancamento():
    """Analisa o arquivo ReceitaLancamento.xlsx"""
    
    # Caminho do arquivo
    file_path = Path("dados_brutos/fato/ReceitaLancamento.xlsx")
    
    if not file_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
        print(f"   Verifique se o arquivo est√° em: {file_path.absolute()}")
        return
    
    print("=" * 80)
    print("AN√ÅLISE DO ARQUIVO: ReceitaLancamento.xlsx")
    print("=" * 80)
    print(f"Data da an√°lise: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # Ler o arquivo
        print("\nüìñ Lendo arquivo Excel...")
        df = pd.read_excel(file_path)
        
        # Informa√ß√µes b√°sicas
        print(f"\nüìä INFORMA√á√ïES B√ÅSICAS:")
        print(f"   - Total de linhas: {len(df):,}")
        print(f"   - Total de colunas: {len(df.columns)}")
        print(f"   - Tamanho em mem√≥ria: {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB")
        
        print(f"\nüìã COLUNAS ENCONTRADAS:")
        for i, col in enumerate(df.columns, 1):
            print(f"   {i:2d}. {col}")
        
        # An√°lise de tipos de dados
        print(f"\nüìà TIPOS DE DADOS:")
        for col in df.columns:
            tipo = df[col].dtype
            nulls = df[col].isnull().sum()
            print(f"   - {col}: {tipo} (nulls: {nulls:,})")
        
        # Amostra de dados
        print(f"\nüìù PRIMEIRAS 5 LINHAS:")
        print(df.head())
        
        # Valores √∫nicos em colunas importantes
        print(f"\nüîç AN√ÅLISE DE VALORES √öNICOS:")
        
        # Verificar colunas de per√≠odo/data
        colunas_periodo = ['COEXERCICIO', 'INMES', 'ANO', 'MES', 'DTLANCAMENTO', 
                          'DATA', 'DT_LANCAMENTO', 'PERIODO']
        for col in colunas_periodo:
            if col in df.columns:
                valores = df[col].unique()
                print(f"\n   {col}:")
                print(f"   - Total de valores √∫nicos: {len(valores)}")
                
                # Se for data, mostrar range
                if 'DT' in col or 'DATA' in col:
                    try:
                        datas = pd.to_datetime(df[col])
                        print(f"   - Data m√≠nima: {datas.min()}")
                        print(f"   - Data m√°xima: {datas.max()}")
                    except:
                        print(f"   - Valores: {sorted(valores)[:10]}")
                else:
                    print(f"   - Valores: {sorted(valores)[:10]}")
                    
                if len(valores) > 10:
                    print(f"   - ... e mais {len(valores) - 10} valores")
        
        # Verificar colunas de conta/classifica√ß√£o
        print(f"\nüí≥ AN√ÅLISE DE CAMPOS DE CONTA/CLASSIFICA√á√ÉO:")
        colunas_conta = []
        for col in df.columns:
            if any(termo in col.upper() for termo in ['CONTA', 'CLASS', 'RECEITA', 'FONTE']):
                colunas_conta.append(col)
        
        for col in colunas_conta:
            print(f"\n   {col}:")
            # Analisar tamanhos se for string
            if df[col].dtype == 'object':
                df['temp_len'] = df[col].astype(str).str.len()
                tamanhos = df['temp_len'].value_counts().sort_index()
                print(f"   - Tamanhos encontrados:")
                for tam, qtd in tamanhos.items():
                    if qtd > 0:  # S√≥ mostrar tamanhos que existem
                        print(f"      {tam} chars: {qtd:,} registros")
                        # Mostrar exemplo
                        exemplo = df[df['temp_len'] == tam][col].iloc[0]
                        print(f"      Exemplo: {exemplo}")
                df.drop('temp_len', axis=1, inplace=True)
            else:
                # Se for num√©rico, mostrar range
                print(f"   - Min: {df[col].min()}")
                print(f"   - Max: {df[col].max()}")
                print(f"   - Valores √∫nicos: {df[col].nunique()}")
        
        # An√°lise de valores monet√°rios
        print(f"\nüí∞ COLUNAS NUM√âRICAS/MONET√ÅRIAS:")
        colunas_valor = []
        for col in df.columns:
            if df[col].dtype in ['float64', 'int64']:
                # Verificar se parece ser valor monet√°rio
                if any(termo in col.upper() for termo in ['VALOR', 'SALDO', 'LANC', 'RECEITA']):
                    colunas_valor.append(col)
        
        for col in colunas_valor:
            print(f"\n   {col}:")
            print(f"   - Min: R$ {df[col].min():,.2f}")
            print(f"   - Max: R$ {df[col].max():,.2f}")
            print(f"   - Soma: R$ {df[col].sum():,.2f}")
            print(f"   - M√©dia: R$ {df[col].mean():,.2f}")
            print(f"   - Zeros: {(df[col] == 0).sum():,}")
            print(f"   - Negativos: {(df[col] < 0).sum():,}")
        
        # Verificar UGs
        colunas_ug = ['COUG', 'UG', 'UNIDADE']
        for col in colunas_ug:
            if col in df.columns:
                print(f"\nüè¢ AN√ÅLISE DE UGs ({col}):")
                ugs = df[col].value_counts().head(10)
                print(f"   - Total de UGs √∫nicas: {df[col].nunique()}")
                print(f"   - Top 10 UGs com mais registros:")
                for ug, qtd in ugs.items():
                    print(f"      {ug}: {qtd:,} registros")
        
        # An√°lise de poss√≠vel estrutura hier√°rquica
        print(f"\nüå≥ AN√ÅLISE DE ESTRUTURA HIER√ÅRQUICA:")
        # Procurar por colunas que possam indicar hierarquia
        for col in df.columns:
            if any(termo in col.upper() for termo in ['GRUPO', 'CATEGORIA', 'TIPO', 'NATUREZA']):
                print(f"\n   {col}:")
                print(f"   - Valores √∫nicos: {df[col].nunique()}")
                top_valores = df[col].value_counts().head(5)
                for valor, qtd in top_valores.items():
                    print(f"      {valor}: {qtd:,} registros")
        
        # Salvar amostra
        print(f"\nüíæ Salvando amostra dos dados...")
        amostra_path = "scripts/amostra_receitalancamento.xlsx"
        
        # Criar amostra com variedade de dados
        # Pegar algumas linhas de cada m√™s/per√≠odo se existir
        if 'INMES' in df.columns:
            amostra = pd.DataFrame()
            for mes in sorted(df['INMES'].unique()):
                amostra = pd.concat([amostra, df[df['INMES'] == mes].head(5)])
            amostra = amostra.head(50)  # Limitar a 50 linhas
        else:
            amostra = df.head(50)
        
        amostra.to_excel(amostra_path, index=False)
        print(f"   ‚úÖ Amostra salva em: {amostra_path}")
        print(f"   - Linhas na amostra: {len(amostra)}")
        
        # Sugest√µes baseadas na an√°lise
        print(f"\nüí° SUGEST√ïES PARA O ETL:")
        print("   1. Verificar se h√° colunas de per√≠odo (COEXERCICIO, INMES)")
        print("   2. Identificar a coluna principal de valor")
        print("   3. Mapear as classifica√ß√µes de receita")
        print("   4. Verificar se h√° campos de data para transformar")
        print("   5. Analisar se precisa de parse especial em algum campo")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao processar arquivo: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    inspect_receita_lancamento()