"""
Script para carga incremental de DespesaLancamento no DuckDB
Uso: python scripts/load_despesa_lancamento_duckdb.py DespesaLancamentoJulho.xlsx
"""
import sys
import os
from datetime import datetime

# Adiciona o diret√≥rio pai ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.modules.etl_despesa_lancamento_duckdb import ETLDespesaLancamentoDuckDB, validar_carga

def main():
    """Executa carga incremental de despesa lan√ßamento"""
    print("=" * 80)
    print("ETL - DESPESA LAN√áAMENTO (DuckDB Local)")
    print("=" * 80)
    
    # Verificar argumento do arquivo
    if len(sys.argv) < 2:
        print("\n‚ùå ERRO: Voc√™ precisa especificar o arquivo!")
        print("\nüí° Uso correto:")
        print("   python scripts/load_despesa_lancamento_duckdb.py DespesaLancamentoJulho.xlsx")
        print("\nüìÅ Arquivos dispon√≠veis na pasta dados_brutos/fato/:")
        
        # Listar arquivos dispon√≠veis
        pasta = "dados_brutos/fato"
        if os.path.exists(pasta):
            arquivos = [f for f in os.listdir(pasta) if f.startswith("DespesaLancamento") and f.endswith(".xlsx")]
            for arq in sorted(arquivos):
                print(f"   - {arq}")
        return
    
    # Montar caminho do arquivo
    nome_arquivo = sys.argv[1]
    arquivo = f"dados_brutos/fato/{nome_arquivo}"
    
    # Verificar se arquivo existe
    if not os.path.exists(arquivo):
        print(f"\n‚ùå Arquivo n√£o encontrado: {arquivo}")
        print("\nüí° Verifique:")
        print("   1. Se o nome do arquivo est√° correto")
        print("   2. Se o arquivo est√° na pasta dados_brutos/fato/")
        print("   3. Se a extens√£o √© .xlsx")
        return
    
    print(f"\nüìÅ Arquivo: {arquivo}")
    print(f"üóÑÔ∏è Banco de dados: DuckDB local (dados_brutos/fato/db_local/lancamentos.duckdb)")
    
    # Criar inst√¢ncia do ETL
    etl = ETLDespesaLancamentoDuckDB(chunk_size=50000)  # Chunks maiores para despesa
    
    # Analisar arquivo
    print("\nüîç Analisando arquivo...")
    periodos, total_estimado = etl.analisar_arquivo(arquivo)
    
    if not periodos:
        print("\n‚ùå N√£o foi poss√≠vel identificar per√≠odos no arquivo!")
        return
    
    print(f"\nüìÖ Per√≠odos encontrados: {', '.join(sorted(periodos))}")
    print(f"üìä Total estimado de registros: ~{total_estimado:,}")
    
    # Aviso para arquivos grandes
    if total_estimado > 500000:
        print("\n‚ö†Ô∏è ATEN√á√ÉO: Arquivo grande detectado!")
        print("   Tempo estimado: 10-20 minutos")
        print("   üí° N√£o feche o terminal durante o processamento!")
    
    # Verificar per√≠odos existentes
    periodos_existentes = []
    for periodo in periodos:
        if etl.validar_periodo_existente(periodo):
            periodos_existentes.append(periodo)
    
    if periodos_existentes:
        print(f"\n‚ö†Ô∏è ATEN√á√ÉO: Os seguintes per√≠odos j√° existem no banco:")
        for p in periodos_existentes:
            # Contar registros existentes
            conn = etl.db_duckdb.get_connection()
            count = conn.execute(f"SELECT COUNT(*) FROM {etl.table_name} WHERE periodo = ?", [p]).fetchone()[0]
            conn.close()
            print(f"   - {p} ({count:,} registros)")
        
        resposta = input("\n‚ùì Deseja SOBRESCREVER os dados existentes? (s/N): ")
        if resposta.lower() != 's':
            print("\n‚ùå Carga cancelada pelo usu√°rio.")
            return
        sobrescrever = True
    else:
        print("\n‚úÖ Todos os per√≠odos s√£o novos.")
        sobrescrever = False
    
    # Confirmar processamento
    print(f"\nüìã RESUMO DA CARGA:")
    print(f"   Arquivo: {nome_arquivo}")
    print(f"   Per√≠odos: {', '.join(sorted(periodos))}")
    print(f"   Registros estimados: ~{total_estimado:,}")
    print(f"   Modo: {'SOBRESCREVER' if sobrescrever else 'INCREMENTAL'}")
    print(f"   Chunks: {etl.chunk_size:,} registros por vez")
    
    resposta = input("\n‚úÖ Confirma o processamento? (S/n): ")
    if resposta.lower() == 'n':
        print("\n‚ùå Carga cancelada pelo usu√°rio.")
        return
    
    print("\nüöÄ Iniciando processamento...")
    print("üí° Dica: DuckDB √© muito r√°pido, mesmo com arquivos grandes!")
    print("üìä A barra de progresso mostrar√° o avan√ßo...\n")
    
    # Processar arquivo
    inicio = datetime.now()
    sucesso = etl.processar_arquivo(arquivo, sobrescrever=sobrescrever)
    tempo_total = datetime.now() - inicio
    
    if sucesso:
        print(f"\n‚úÖ Carga conclu√≠da com sucesso em {tempo_total}!")
        
        # Validar carga
        validar_carga()
        
        # Verificar espa√ßo em disco
        import shutil
        db_path = "dados_brutos/fato/db_local/lancamentos.duckdb"
        if os.path.exists(db_path):
            size_mb = os.path.getsize(db_path) / (1024 * 1024)
            print(f"\nüíæ Tamanho do banco DuckDB: {size_mb:.1f} MB")
        
        # Mostrar pr√≥ximos passos
        print("\nüìå PR√ìXIMOS PASSOS:")
        print("   1. Para gerar relat√≥rios de confer√™ncia:")
        print("      python scripts/relatorio_conferencia_duckdb.py")
        print("   2. Para consultar dados espec√≠ficos:")
        print("      python scripts/consultar_lancamentos_duckdb.py")
        
    else:
        print(f"\n‚ùå Carga falhou ap√≥s {tempo_total}!")
        print("\nüí° Poss√≠veis causas:")
        print("   1. Formato incorreto do Excel")
        print("   2. Colunas obrigat√≥rias faltando")
        print("   3. Dados com problemas de encoding")
        print("   4. Mem√≥ria insuficiente (feche outros programas)")
        print("\nüìã Verifique os logs acima para mais detalhes!")

if __name__ == "__main__":
    main()