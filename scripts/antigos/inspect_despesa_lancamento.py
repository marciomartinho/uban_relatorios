"""
Script para analisar estrutura do arquivo DespesaLancamento.xlsx
Baseado no inspect_receita_lancamento.py
OTIMIZADO para arquivos grandes (1M+ linhas) - analisa apenas amostra de 10.000 linhas
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
from pathlib import Path
from datetime import datetime

def inspect_despesa_lancamento():
    """Analisa o arquivo DespesaLancamento.xlsx"""
    
    # Caminho do arquivo (relativo √† raiz do projeto)
    file_path = Path("dados_brutos/fato/DespesaLancamento.xlsx")
    
    if not file_path.exists():
        print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
        print(f"   Verifique se o arquivo est√° em: {file_path.absolute()}")
        return
    
    print("=" * 80)
    print("AN√ÅLISE DO ARQUIVO: DespesaLancamento.xlsx")
    print("=" * 80)
    print(f"Data da an√°lise: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # Ler o arquivo - APENAS AMOSTRA para arquivos grandes
        print("\nüìñ Lendo arquivo Excel (amostra de 10.000 linhas)...")
        # Primeiro, vamos ver o tamanho total sem carregar tudo
        df_info = pd.read_excel(file_path, nrows=1)
        print(f"   - Colunas detectadas: {len(df_info.columns)}")
        
        # Agora ler apenas 10.000 linhas para an√°lise
        df = pd.read_excel(file_path, nrows=10000)
        print(f"   ‚ö° Carregando apenas primeiras 10.000 linhas para an√°lise r√°pida")
        
        # Informa√ß√µes b√°sicas
        print(f"\nüìä INFORMA√á√ïES B√ÅSICAS:")
        print(f"   - Linhas analisadas: {len(df):,} (amostra)")
        print(f"   - Total estimado no arquivo: ~1.000.000 linhas")
        print(f"   - Total de colunas: {len(df.columns)}")
        print(f"   - Tamanho da amostra em mem√≥ria: {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB")
        
        print(f"\nüìã COLUNAS ENCONTRADAS:")
        for i, col in enumerate(df.columns, 1):
            print(f"   {i:2d}. {col}")
        
        # An√°lise de tipos de dados
        print(f"\nüìà TIPOS DE DADOS:")
        for col in df.columns:
            tipo = df[col].dtype
            nulls = df[col].isnull().sum()
            print(f"   - {col}: {tipo} (nulls: {nulls:,})")
        
        # Amostra de dados
        print(f"\nüìù PRIMEIRAS 5 LINHAS:")
        print(df.head())
        
        # Valores √∫nicos em colunas importantes
        print(f"\nüîç AN√ÅLISE DE VALORES √öNICOS:")
        
        # Verificar colunas de per√≠odo/data
        colunas_periodo = ['COEXERCICIO', 'INMES', 'ANO', 'MES', 'DTLANCAMENTO', 
                          'DATA', 'DT_LANCAMENTO', 'PERIODO', 'DTLIQUIDACAO']
        for col in colunas_periodo:
            if col in df.columns:
                valores = df[col].unique()
                print(f"\n   {col}:")
                print(f"   - Total de valores √∫nicos: {len(valores)}")
                
                # Se for data, mostrar range
                if 'DT' in col or 'DATA' in col:
                    try:
                        datas = pd.to_datetime(df[col])
                        print(f"   - Data m√≠nima: {datas.min()}")
                        print(f"   - Data m√°xima: {datas.max()}")
                    except:
                        print(f"   - Valores: {sorted(valores)[:10]}")
                else:
                    print(f"   - Valores: {sorted(valores)[:10]}")
                    
                if len(valores) > 10:
                    print(f"   - ... e mais {len(valores) - 10} valores")
        
        # Verificar colunas de conta/classifica√ß√£o espec√≠ficas de despesa
        print(f"\nüí≥ AN√ÅLISE DE CAMPOS DE CONTA/CLASSIFICA√á√ÉO:")
        colunas_conta = []
        for col in df.columns:
            if any(termo in col.upper() for termo in ['CONTA', 'CLASS', 'DESPESA', 'FONTE', 
                                                       'NATUREZA', 'ELEMENTO', 'MODALIDADE']):
                colunas_conta.append(col)
        
        for col in colunas_conta:
            print(f"\n   {col}:")
            # Analisar tamanhos se for string
            if df[col].dtype == 'object':
                df['temp_len'] = df[col].astype(str).str.len()
                tamanhos = df['temp_len'].value_counts().sort_index()
                print(f"   - Tamanhos encontrados:")
                for tam, qtd in tamanhos.items():
                    if qtd > 0:  # S√≥ mostrar tamanhos que existem
                        print(f"      {tam} chars: {qtd:,} registros")
                        # Mostrar exemplo
                        exemplo = df[df['temp_len'] == tam][col].iloc[0]
                        print(f"      Exemplo: {exemplo}")
                df.drop('temp_len', axis=1, inplace=True)
            else:
                # Se for num√©rico, mostrar range
                print(f"   - Min: {df[col].min()}")
                print(f"   - Max: {df[col].max()}")
                print(f"   - Valores √∫nicos: {df[col].nunique()}")
        
        # An√°lise de valores monet√°rios (foco em despesa)
        print(f"\nüí∞ COLUNAS NUM√âRICAS/MONET√ÅRIAS:")
        colunas_valor = []
        for col in df.columns:
            if df[col].dtype in ['float64', 'int64']:
                # Verificar se parece ser valor monet√°rio
                if any(termo in col.upper() for termo in ['VALOR', 'SALDO', 'LANC', 'DESPESA', 
                                                          'EMPENHO', 'LIQUIDACAO', 'PAGAMENTO']):
                    colunas_valor.append(col)
        
        for col in colunas_valor:
            print(f"\n   {col}:")
            print(f"   - Min: R$ {df[col].min():,.2f}")
            print(f"   - Max: R$ {df[col].max():,.2f}")
            print(f"   - Soma: R$ {df[col].sum():,.2f}")
            print(f"   - M√©dia: R$ {df[col].mean():,.2f}")
            print(f"   - Zeros: {(df[col] == 0).sum():,}")
            print(f"   - Negativos: {(df[col] < 0).sum():,}")
        
        # Verificar UGs
        colunas_ug = ['COUG', 'UG', 'UNIDADE']
        for col in colunas_ug:
            if col in df.columns:
                print(f"\nüè¢ AN√ÅLISE DE UGs ({col}):")
                ugs = df[col].value_counts().head(10)
                print(f"   - Total de UGs √∫nicas: {df[col].nunique()}")
                print(f"   - Top 10 UGs com mais registros:")
                for ug, qtd in ugs.items():
                    print(f"      {ug}: {qtd:,} registros")
        
        # An√°lise espec√≠fica de despesa
        print(f"\nüí∏ AN√ÅLISE ESPEC√çFICA DE DESPESA:")
        
        # Procurar por tipos de despesa
        colunas_tipo_despesa = ['TIPO', 'TIPODESPESA', 'TIPO_DESPESA', 'INDEBITOCREDITO']
        for col in colunas_tipo_despesa:
            if col in df.columns:
                print(f"\n   {col}:")
                valores = df[col].value_counts()
                for valor, qtd in valores.items():
                    print(f"      {valor}: {qtd:,} registros")
        
        # Procurar por documentos fiscais
        colunas_doc = ['NUDOCUMENTO', 'DOCUMENTO', 'NOTA', 'NF', 'EMPENHO', 'NUEMPENHO']
        for col in colunas_doc:
            if col in df.columns:
                print(f"\n   {col}:")
                print(f"   - Total de documentos √∫nicos: {df[col].nunique()}")
                print(f"   - Amostra: {df[col].head(5).tolist()}")
        
        # An√°lise de estrutura hier√°rquica de despesa
        print(f"\nüå≥ AN√ÅLISE DE ESTRUTURA HIER√ÅRQUICA DE DESPESA:")
        # Procurar por colunas espec√≠ficas de despesa
        for col in df.columns:
            if any(termo in col.upper() for termo in ['FUNCAO', 'SUBFUNCAO', 'PROGRAMA', 
                                                       'PROJETO', 'ATIVIDADE', 'OPERACAO']):
                print(f"\n   {col}:")
                print(f"   - Valores √∫nicos: {df[col].nunique()}")
                top_valores = df[col].value_counts().head(5)
                for valor, qtd in top_valores.items():
                    print(f"      {valor}: {qtd:,} registros")
        
        # Verificar eventos espec√≠ficos de despesa
        colunas_evento = ['COEVENTO', 'EVENTO', 'TIPOEVENTO']
        for col in colunas_evento:
            if col in df.columns:
                print(f"\n   {col}:")
                eventos = df[col].value_counts().head(10)
                print(f"   - Total de eventos √∫nicos: {df[col].nunique()}")
                print(f"   - Top 10 eventos:")
                for evento, qtd in eventos.items():
                    print(f"      {evento}: {qtd:,} registros")
        
        # Salvar amostra
        print(f"\nüíæ Salvando amostra dos dados...")
        amostra_path = "scripts/amostra_despesalancamento.xlsx"
        
        # Criar amostra com variedade de dados
        # Pegar algumas linhas de cada m√™s/per√≠odo se existir
        print(f"   - Usando dados j√° carregados (primeiras 10.000 linhas)")
        if 'INMES' in df.columns:
            amostra = pd.DataFrame()
            meses_unicos = sorted(df['INMES'].unique())
            print(f"   - Meses encontrados na amostra: {meses_unicos}")
            for mes in meses_unicos:
                linhas_mes = df[df['INMES'] == mes].head(5)
                amostra = pd.concat([amostra, linhas_mes])
            amostra = amostra.head(50)  # Limitar a 50 linhas
        else:
            amostra = df.head(50)
        
        amostra.to_excel(amostra_path, index=False)
        print(f"   ‚úÖ Amostra salva em: {amostra_path}")
        print(f"   - Linhas na amostra: {len(amostra)}")
        
        # An√°lise de poss√≠veis est√°gios da despesa
        print(f"\nüìä AN√ÅLISE DE EST√ÅGIOS DA DESPESA:")
        estagios = ['EMPENHO', 'LIQUIDACAO', 'PAGAMENTO']
        for estagio in estagios:
            colunas_estagio = [col for col in df.columns if estagio in col.upper()]
            if colunas_estagio:
                print(f"\n   Est√°gio: {estagio}")
                for col in colunas_estagio:
                    print(f"   - {col}")
        
        # Sugest√µes baseadas na an√°lise
        print(f"\nüí° SUGEST√ïES PARA O ETL:")
        print("   1. Verificar se h√° colunas de per√≠odo (COEXERCICIO, INMES)")
        print("   2. Identificar se h√° diferentes est√°gios de despesa (empenho, liquida√ß√£o, pagamento)")
        print("   3. Mapear as classifica√ß√µes or√ßament√°rias (fun√ß√£o, subfun√ß√£o, programa, etc.)")
        print("   4. Analisar o campo COCONTACORRENTE para parse (17, 38 ou 40 chars)")
        print("   5. Verificar se h√° campo INDEBITOCREDITO para tipo de lan√ßamento")
        print("   6. Identificar campos de natureza da despesa para parse")
        print("   7. Mapear campos de documento fiscal/empenho")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao processar arquivo: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    inspect_despesa_lancamento()